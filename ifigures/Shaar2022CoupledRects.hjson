{
  metadata:
  {
    platform: ifigures
    version: 2023.1.20.1
    previous_version: 2023.1.4.1
    modifications: saved terminal as ballab.terminal to allow access (example - set alignment to right using ballab.terminal.output_field.style.textAlign='right')
    URL_dir: https://webhome.weizmann.ac.il/home/ifigures/
    URL: https://webhome.weizmann.ac.il/home/ifigures/ifigure.ifig.html
  }
  contents:
  [
    {
      type: Conteval
      exp: time // זמן
    }
    {
      type: Conteval
      exp: EintL // אנרגיה פנימית שמאל
    }
    {
      type: Conteval
      exp: EkavgL // אנר. קינ. לחלקיק שמאל
    }
    {
      type: Conteval
      exp: EintR // אנרגיה פנימית ימין
    }
    {
      type: Conteval
      exp: EkavgR // אנר. קינ. לחלקיק ימין
    }
    {
      type: iscriptLibrary
      iscripts:
      [
        {
          name: OnLoadIfigure
          script:
            '''
            initialize()
            parameters()
            setFollowMouse()
            if(ballab.URLobj.nolines){draw_lines=false}
            switch(ballab.URLobj.setup){
            case "TwoParticles" :initializeTwoParticles();break
            case "Rectangle":initializeRectangle();break
            case "Circle":initializeCircle();break
            default: initializeTwoRectangles()
            }
            '''
          arguments_string: ()
        }
        {
          name: startRectangle
          script:
            '''
            Nx=7
            Ny=2
            y0=1
            SlowMotion=3


            setupRectangle()
            '''
          arguments_string: ()
        }
        {
          name: step
          script:
            '''
            ***
            ps.map(p=>{
             if(!p.freeze){
             p.x+=p.vx*dt; p.y+=p.vy*dt;
             p.ay=-g+(p.y<0)*(-kfloor/m*p.y); p.ax=0}
            })

            springs.map(s=>{
            let p1=s.p1; let p2=s.p2;
            let dx=p2.x-p1.x; let dy=p2.y-p1.y;
            let d=Math.sqrt(dx**2+dy**2);
            if(d<fmax*s.L){
             s.on=true
             let a=s.k/m*(d-s.L)
             let ax=a*dx/d; let ay=a*dy/d;
             p1.ax+=ax; p2.ax+=-ax;
             p1.ay+=ay; p2.ay+=-ay;
            } else {s.on=false}
            })

            ps.map(p=>{
            if(!p.freeze){
            p.vx+=p.ax*dt; p.vy+=p.ay*dt}});
            '''
          arguments_string: ()
        }
        {
          name: rotate
          script:
            '''
            ps.map(p=>{
            let x=p.x*cos(alpha)-p.y*sin(alpha)
            let y=p.x*sin(alpha)+p.y*cos(alpha)
            p.x=x;
            p.y=y;
            })
            '''
          arguments_string: (alpha)
        }
        {
          name: calcEs
          script:
            '''
            calcCM()
            h=CM.y

            calcEintp()
            calcLeftRectEintp()
            calcRightRectEintp()

            Ektot=0
            Eintk=0
            ps.map(p=>{
             Eintk+=0.5*m*((p.vx-CM.vx)**2+(p.vy-CM.vy)**2)
             Ektot+=0.5*m*(p.vx**2+p.vy**2)
            })
            EkLeft=0
            ps.map(p=>{
             ((p.body == "left") && (!p.freeze)) ? EkLeft+=0.5*m*(p.vx**2+p.vy**2): EkLeft+=0})

            EkRight=0
            ps.map(p=>{
             ((p.body == "right") && (!p.freeze)) ? EkRight+=0.5*m*(p.vx**2+p.vy**2): EkRight+=0})

            Eint=Eintk+Eintp
            EintLeft = EkLeft+EintpLeft
            EintRight = EkRight+EintpRight

            Efloor=0
            ps.map(p=>{Efloor+=0.5*kfloor*(p.y<0)*p.y^2})

            if(typeof dt_refresh === 'undefined') {
              time_avg_array_length = 10
            } else {
              time_avg_array_length = energy_avg_secs/dt_refresh
            }
            if(EsintL.length < time_avg_array_length) {
              EsintL.push(EintLeft)
              EsintR.push(EintRight)
              EsKLeft.push(EkLeft)
              EsKRight.push(EkRight)
              if(EsintL.length >= time_avg_array_length) {
                nextEi=0
              }
            } else {
              EsintL[nextEi] = EintLeft
              EsintR[nextEi] = EintRight
              EsKLeft[nextEi] = EkLeft
              EsKRight[nextEi] = EkRight
              nextEi = (nextEi+1) % EsintL.length
            }

            EintLeftAvg = sum(EsintL)/EsintL.length
            EintRightAvg = sum(EsintR)/EsintR.length
            EkLeftAvg = sum(EsKLeft)/EsKLeft.length
            EkRightAvg = sum(EsKRight)/EsKRight.length
            '''
          arguments_string: ()
        }
        {
          name: calcCM
          script:
            '''
            let x=0; let y=0; let vx=0; let vy=0;
            M=0
            ps.map(p=>{x+=m*p.x; y+=m*p.y; vx+=m*p.vx; vy+=m*p.vy; M+=m})
            CM={x:x/M,y:y/M,vx:vx/M,vy:vy/M}

            '''
          arguments_string: ()
        }
        {
          name: parameters
          script:
            '''
            g=9.8 // תאוצת המשיכה
            m=0.01 // מסת חלקיק
            L0=0.4 // אורך רפוי
            angle=30 // זווית סיבוב
            kfloor=1e5 // קשיחות הרצפה
            dt_factor=0.01 // מקדם דיוק
            k=100 // קשיחות קפיצים
            Cr=0.05 // גודל חלקיקים
            draw_lines=true // ציור הקווים
            fmax=10 // מתיחה מקסימלית
            followMouse.followX=true
            // מעקב אחר עכבר אופקי
            followMouse.followY=true
            // מעקב אחר עכבר אנכי

            EShowNround=2 //ספרות משמעותיות אנרגיות
            EShowMin=1e-5 // אנרגיה מינימלית מוצגת
            tNround=2 //ספרות אחרי הנקודה זמן
            '''
          arguments_string: ()
        }
        {
          name: setupRectangle
          script:
            '''
            RepeatStop()
            t=0
            ps=[]
            springs=[]
            createRectangle(0,0,Nx,Ny)

            rotate(angle/180*pi);

            ps.map(p=>p.y+=y0)
            calcCM()
            ps.map(p=>p.x+=-CM.x)

            Llim=y0+Nx*L0+Ny*L0+0.2
            xlim(-Llim/2,Llim/2)
            ylim(0,Llim)
            draw()
            '''
          arguments_string: ()
        }
        {
          name: fullstep
          script:
            '''
            dt_refresh=0.01/SlowMotion
            let kmax=max([k,kfloor])
            dt=2*pi*sqrt(m)/sqrt(kmax)*dt_factor
            steps_per_refresh=dt_refresh/dt;
            for(let l=0;l<steps_per_refresh;l++){
             step()
            }
            t+=steps_per_refresh*dt
            update_fig()
            '''
          arguments_string: ()
        }
        {
          name: update_fig
          script:
            '''
            ***
            if(draw_lines){
            springs.map((s,i)=>{
            if(s.on){
            Ls[i].style.display='block'
            Ls[i].set_data( [ s.p1.x , s.p2.x ] , [ s.p1.y , s.p2.y ] )
            } else {Ls[i].style.display='none'}
            })}
            Cs.map((C,i)=>{C.x=ps[i].x,C.y=ps[i].y})

            calcEs()
            time=round(t,tNround)
            v1=ps[0]?ERound(sqrt(ps[0].vx**2+ps[0].vy**2)):0
            v2=ps[1]?ERound(sqrt(ps[1].vx**2+ps[1].vy**2)):0
            Mgh=ERound(M*g*h)
            Ek=ERound(Ektot)
            Eel=ERound(Eintp)
            Etot=ERound(Ektot+Eintp+M*g*h+Efloor)
            //EintL=ERound(EintLeft)
            //EintR=ERound(EintRight)
            //EkavgL=ERound(EkLeft/(NxLeft*NyLeft))
            //EkavgR=ERound(EkRight/(NxRight*NyRight))
            EintL=ERound(EintLeftAvg)
            EintR=ERound(EintRightAvg)
            LeftParticles = NxLeft*NyLeft
            RightParticles = NxRight*NyRight
            if(fixed_to_floor !== 'undefined' && fixed_to_floor) {
            // LeftParticles -= NxLeft;
            // RightParticles -= NxRight;
            LeftParticles -= 1;
            RightParticles -= 1;
            }
            EkavgL=ERound(EkLeftAvg/LeftParticles)
            EkavgR=ERound(EkRightAvg/RightParticles)
            if(tracking.length<tracking_points) {
              tracking.push({
                time: time,
                EintL: EintLeftAvg,
                EkavgL: EkLeftAvg/LeftParticles,
                EintR: EintRightAvg,
                EkavgR: EkRightAvg/RightParticles
            })
            }
            '''
          arguments_string: ()
        }
        {
          name: setFollowMouse
          script:
            '''
            ballab.figure_current.plot_click_rect.addEventListener("click",
            function(){
            if(ballab.figure_current.buttons.cross.down){
            findParticleClick(false)}}
            )

            ballab.figure_current.plot_click_rect.addEventListener("dblclick",
            function(){if(ballab.figure_current.buttons.cross.down){
            findParticleClick(true)}}
            )

            document.addEventListener('keydown', (event) => {
              var name = event.key;
              var code = event.code;
              if ( name==" " ) {
            if(ballab.repeat_cell.isRepeating){RepeatStop()}
             else {RepeatGo()}
            }
            }, false);

            setInterval(
            function(){
            if(followMouse.on && (!isNaN(PointingX())) ){
             if(followMouse.followX){followMouse.p.x=PointingX()}
             if(followMouse.followY){followMouse.p.y=PointingY()}
            update_fig()
            }
            }
            ,10)
            '''
          arguments_string: (dbclick)
        }
        {
          name: calcEintp
          script:
            '''
            ***
            Eintp=0
            Echem=0
            springs.map(s=>{
            if(s.on){
            let p1=s.p1; let p2=s.p2;
            let dx=p2.x-p1.x; let dy=p2.y-p1.y;
            let d=Math.sqrt(dx**2+dy**2)
            Eintp+=0.5*k*(d-s.L)**2} else
            Echem+=0.5*k*(s.L*(fmax-1))**2
            })
            '''
          arguments_string: ()
        }
        {
          name: setupCircle
          script:
            '''
            // not updated
            if(N1<4){
            print("N1 must be at least 4");
            return
            }
            RepeatStop()
            t=0
            let Nrings=Rs.length
            let irad=2*pi/N1
            let dinin=Math.sqrt( (cos(irad)-1)**2 + sin(irad)**2 )
            let Linins=Rs.map(R=>R*dinin)
            let iinout=[0:Nrings-1]
            let Linouts=iinout.map(iR=>Math.sqrt( ( cos(irad/2)*Rs[iR+1] - Rs[iR] )**2 + (sin(irad/2)*Rs[iR+1])**2 ))
            ps=[]
            springs=[];
            iring=[0:N1]
            Rs.map((R,iR)=>{
             let dte = iR / 2 * irad
             iring.map(i=>ps.push({
              x:R*cos(i*irad + dte),
              y:R*sin(i*irad + dte),
              vx:0,vy:0,
              ax:0,ay:0
             }))
             iring.map(i=>{
              springs.push({i1:iR*N1 + i, i2:iR*N1 + (i+1)%N1, L:Linins[iR],on:true})
             })
            })

            iinout.map(iR=>{
             iring.map(i=>{
              springs.push({
               i1:iR*N1 + i,
               i2:(iR+1)*N1 + i,
               L:Linouts[iR],
               on:true
              })
              springs.push({
               i1:(iR+1)*N1 + i,
               i2:iR*N1 + (i+1)%N1,
               L:Linouts[iR],
               on:true
              })
             })
            })

            rotate(-pi/2)
            ps.map(p=>p.y+=y0+Rs[Nrings-1])
            Llim=y0+Rs[Nrings-1]*3
            xlim(-Llim/2,Llim/2)
            ylim(0,Llim)
            draw()
            '''
          arguments_string: ()
        }
        {
          name: draw
          script:
            '''
            clf()
            Llim=(NxLeft+NxRight)*L0+Math.max(NyLeft,NyRight)*L0+0.2
            xlim(-Llim/2,Llim/2)
            ylim(0,Llim)
            if(draw_lines){
            Ls=springs.map(s=>Line([s.p1.x,s.p2.x],[s.p1.y,s.p2.y],'r'))
            }
            Cs=ps.map(p=>Circle(p.x,p.y,Cr));
            update_fig()

            xlabel('מיקום אופקי [מטרים]')
            ylabel('גובה [מטרים]')
            '''
          arguments_string: ()
        }
        {
          name: startCircle
          script:
            '''
            y0=0.5
            N1=20
            SlowMotion=10
            k=10000




            setupCircle()
            '''
          arguments_string: ()
        }
        {
          name: setupBonding
          script:
            '''
            addTriangle=function(x,y,vx,vy,L0){
            ps.push({x:x-L0/2,y:y,vx:vx,vy:vy,ax:0,ay:0})
            ps.push({x:x+L0/2,y:y,vx:vx,vy:vy,ax:0,ay:0})
            ps.push({x:x,y:y+L0*sqrt(3/4),vx:vx,vy:vy,ax:0,ay:0})
            }
            t=0
            ps=[]
            parameters()
            Cr=0.02; dt_factor=0.001
            g=0; kfloor=1000;
            fmax=1.2
            y0=0.5; L0=0.1; m=1; k=100;SlowMotion=1
            dx=0.25;dvx=0.01; dy=0.05; xlim(-1,1); ylim(-1,1)
            addTriangle(-dx/2,y0-dy/2,dvx/2,0,L0)
            addTriangle(dx/2,y0+dy/2,-dvx/2,0,L0)
            N=ps.length
            setAllSprings(L0)
            draw()
            '''
          arguments_string: ()
        }
        {
          name: setAllSprings
          script:
            '''
            let N=ps.length
            springs=[]
            for(let i1=0; i1<N; i1++){
            for(let i2=i1+1; i2<N; i2++){
            let p1=ps[i1]; let p2=ps[i2];
            let dx=p2.x-p1.x; let dy=p2.y-p1.y;
            let d=Math.sqrt(dx**2+dy**2);
            springs.push({p1:p1,p2:p2,L:L0,on:(d<L0*fmax)})
            }}
            '''
          arguments_string: (L0)
        }
        {
          name: findParticle
          script:
            '''
            let d2min=Infinity
            let ip=undefined
            let hit=false
            ps.map((p,i)=>{
            let d2=(p.x-x)**2+(p.y-y)**2
            if(d2<0.25*L0**2 && d2<d2min){d2min=d2; ip=i; hit=true}
            })
            return {hit:hit,ip:ip}
            '''
          arguments_string: (x,y)
        }
        {
          name: findParticleClick
          script:
            '''
            if((!followMouse.on) || dblclick){
            if(dblclick){followMouse.on=false}
            let findp=findParticle(PointingX(),PointingY())
            if(findp.hit){
             let p=ps[findp.ip]
             if(dblclick){
              p.freeze=false
             } else {
              p.freeze=true
              p.vx=0
              p.vy=0
              followMouse.p=p
              followMouse.on=true
             }
            }
            } else {followMouse.on=false}
            '''
          arguments_string: (dblclick)
        }
        {
          name: play
          script: ""
          arguments_string: ()
        }
        {
          name: initialize
          script:
            '''
            ContEvals=ballab.ifigure_objects.filter(obj => {
            return obj.type=='Conteval'
            })
            CodeCells=ballab.ifigure_objects.filter(obj => {
            return obj.type=='Cell_code'
            })

            followMouse={
             on:false,
             p:undefined,
             x:undefined,
             y:undefined,
             followX:true,
             followY:true,
             updatePos:function(){
              if(!isNaN(PointingX())){this.x=PointingX()} else {this.on=false}
              if(!isNaN(PointingY())){this.y=PointingY()} else {this.on=false}
             }
            }

            ContEvals[0].exp.value="time // זמן"

            ContEvals[1].exp.value="Ek // סך אנרגיה קינטית"
            ContEvals[2].exp.value="Eel // סך אנרגיה אלסטית"
            ContEvals[3].exp.value="Mgh // סך אנרגית כובד"
            ContEvals[4].exp.value="Etot // סך כל האנרגיה "

            print(":יחידות")
            print("זמן: שניה")
            print("מרחק: מטר")
            print('מסה: ק״ג')
            print("כח: ניוטון")
            print("אנרגיה: גא׳ול")
            print("קבוע אינטראקציה: ניוטון למטר")

            ballab.terminal.output_field.style.textAlign= 'right';

            cellLib.main_window.style.gridTemplateColumns=" auto 300px"

            CodeCells[1].loadIscript(ballab.iscriptLibrary.getIscriptByName("play"))
            '''
          arguments_string: ()
        }
        {
          name: startTwoParticles
          script:
            '''
            k=10
            L0=0.5
            m=0.01
            SlowMotion=10



            setupTwoParticles()
            '''
          arguments_string: ()
        }
        {
          name: setupTwoParticles
          script:
            '''
            t=0
            g=0
            followMouse.followY=false
            ps=[]
            springs=[]
            ps.push({x:-L0/2,y:1,vx:0,vy:0,ax:0,ay:0})
            ps.push({x:L0/2,y:1,vx:0,vy:0,ax:0,ay:0})
            springs.push({i1:0,i2:1,L:L0,on:true})
            Llim=3*L0+0.2
            xlim(-Llim/2,Llim/2)
            ylim(1-Llim/2,1+Llim/2)
            draw()
            Cs[1].color="green"
            RepeatGo()
            '''
          arguments_string: ()
        }
        {
          name: ERound
          script:
            '''
            if(abs(E)<EShowMin){return 0}
            return roundSignificant(E,EShowNround)
            '''
          arguments_string: (E)
        }
        {
          name: initializeRectangle
          script:
            '''

            CodeCells[0].loadIscript(ballab.iscriptLibrary.getIscriptByName("startRectangle"))


            startRectangle()
            '''
          arguments_string: ()
        }
        {
          name: initializeTwoParticles
          script:
            '''
            ContEvals[0].exp.value="time // זמן"
            ContEvals[1].exp.value="Ek // סך אנרגיה קינטית"
            ContEvals[2].exp.value="Eel // אנרגיה אלסטית"
            ContEvals[3].exp.value="v1 // מהירות חלקיק כחול"
            ContEvals[4].exp.value="v2 // מהירות חלקיק ירוק"
            CodeCells[0].name_input.value

            CodeCells[0].loadIscript(ballab.iscriptLibrary.getIscriptByName("startTwoParticles"))

            CodeCells[1].loadIscript(ballab.iscriptLibrary.getIscriptByName("play"))

            Cr=0.05

            startTwoParticles()

            '''
          arguments_string: ()
        }
        {
          name: initializeCircle
          script:
            '''
            CodeCells[0].loadIscript(ballab.iscriptLibrary.getIscriptByName("startCircle"))

            Rs=[0.125,0.15,0.175]
            Cr=0.01
            startCircle()
            '''
          arguments_string: ()
        }
        {
          name: createRectangle
          script:
            '''
            i1=0
            pstart = ps.length
            sstart = springs.length

            for(let ly=0;ly<Ny;ly++){
            let teta=random()*2*pi
            let p1={x:0,y:ly*L0,vx:V0Size*cos(teta),vy:V0Size*sin(teta),ax:0,ay:0,body:label}
            ps.push(p1);
            for(let lx=1;lx<Nx;lx++){
             let teta=random()*2*pi
             let p2={x:lx*L0,y:ly*L0,vx:V0Size*cos(teta),vy:V0Size*sin(teta),ax:0,ay:0,body:label}
             p1=p2
             ps.push(p1)
            }
            }

            for(let ly=0;ly<Ny;ly++){
            if(ly>0){
             springs.push({p1:ps[pstart+i1],p2:ps[pstart+(ly-1)*Nx],L:L0,on:true, k:k})
            }
            for(let lx=1;lx<Nx;lx++){
             let i2=i1+1;
             springs.push({p1:ps[pstart+i1],p2:ps[pstart+i2],L:L0,on:true, k:k})

             if(ly>0){
               springs.push({p1:ps[pstart+i1],p2:ps[pstart+(ly-1)*Nx+lx],L:sqrt(2)*L0,on:true,k:k})
               springs.push({p1:ps[pstart+i2],p2:ps[pstart+(ly-1)*Nx+lx-1],L:sqrt(2)*L0,on:true,k:k})
               springs.push({p1:ps[pstart+i2],p2:ps[pstart+(ly-1)*Nx+lx],L:L0,on:true,k:k})
             }
             i1=i2
            }
            i1+=1}


            ps.map((p,i)=> i>= pstart ? p.y+=Y0 : p.y = p.y)
            ps.map((p,i)=> i>= pstart ? p.x+=X0 : p.x = p.x)

            '''
          arguments_string: (X0,Y0,Nx,Ny,V0Size,label)
        }
        {
          name: startRectangles
          script:
            '''
            Nx=5
            Ny=5
            y0=0
            SlowMotion=3


            setupRectangles()
            '''
          arguments_string: ()
        }
        {
          name: setupRectangles
          script:
            '''
            RepeatStop()
            t=0
            ps=[]
            springs=[]
            createRectangle(0,0,Nx,Ny,0)
            createRectangle(Nx*L0,0,Nx,Ny,20)
            springs.push({p1:ps[Nx*Ny/2+Nx/2-1],p2:ps[Nx*Ny+Nx*Ny/2-Nx/2],L:L0,on:true})

            rotate(angle/180*pi);

            ps.map(p=>p.y+=y0)
            calcCM()
            ps.map(p=>p.x+=-CM.x)

            Llim=y0+2*Nx*L0+Ny*L0+0.2
            xlim(-Llim/2,Llim/2)
            ylim(0,Llim)
            draw()

            '''
          arguments_string: ()
        }
        {
          name: startLeftRectangle
          script:
            '''
            NxLeft=10
            NyLeft=10
            V0Left=10






            g=0
            kfloor=10000
            setupTracking()
            fixed_to_floor=0
            setupEsArray()
            setupLeftRectangle()
            setupRightRectangle()
            fixToFloor()
            storeV0s()
            '''
          arguments_string: ()
        }
        {
          name: startRightRectangle
          script:
            '''
            NxRight=10
            NyRight=10
            V0Right=0

            connections = 2
            Kconnections = 100
            SlowMotion=1
            energy_avg_secs = 5



            setupEsArray()
            setupLeftRectangle()
            setupRightRectangle()
            fixToFloor()
            storeV0s()
            setupTracking()
            '''
          arguments_string: ()
        }
        {
          name: setupLeftRectangle
          script:
            '''
            RepeatStop()
            t=0
            ps=[]
            springs=[]
            createRectangle(0,0,NxLeft,NyLeft,V0Left,"left")

            calcCM()
            ps.map(p=>p.x+=-CM.x)
            if(typeof NxRight === 'undefined') {NxRight = 0};
            if(typeof NyRight === 'undefined') {NyRight = 0 };
            Llim=(NxLeft+NxRight)*L0+Math.max(NyLeft,NyRight)*L0+0.2
            xlim(-Llim/2,Llim/2)
            ylim(0,Llim)
            draw()
            '''
          arguments_string: ()
        }
        {
          name: setupRightRectangle
          script:
            '''
            RepeatStop()
            t=0
            if(typeof V0Right === 'undefined') {return}
            createRectangle(ps[ps.length-1].x+L0,0,NxRight,NyRight,V0Right,"right")
            connections = min([connections,NyLeft-1,NyRight-1])
            yDist = max(floor((Math.min(NyLeft,NyRight)-1)/connections),1)

            for(i=1;i<=connections;i++) {
            springs.push({p1:ps[NxLeft*yDist*i+NxLeft-1],p2:ps[NxLeft*NyLeft+NxRight*(yDist*i)],L:L0,on:true,k:Kconnections})
            }

            calcCM()
            ps.map(p=>p.x+=-CM.x)

            Llim=(NxLeft+NxRight)*L0+Math.max(NyLeft,NyRight)*L0+0.2
            xlim(-Llim/2,Llim/2)
            ylim(0,Llim)
            xLeftMax = NxLeft*L0-CM.x
            draw()

            '''
          arguments_string: ()
        }
        {
          name: calcLeftRectEintp
          script:
            '''
            ***
            EintpLeft=0
            EchemLeft=0
            springs.map(s=>{
            if(s.on && s.p1.body == "left" && s.p2.body == "left"){
            let p1=s.p1; let p2=s.p2;
            let dx=p2.x-p1.x; let dy=p2.y-p1.y;
            let d=Math.sqrt(dx**2+dy**2)
            EintpLeft+=0.5*k*(d-s.L)**2} else
            EchemLeft+=0.5*k*(s.L*(fmax-1))**2
            })
            '''
          arguments_string: ()
        }
        {
          name: calcRightRectEintp
          script:
            '''
            ***
            EintpRight=0
            EchemRight=0
            springs.map(s=>{
            if(s.on && s.p1.body == "right" && s.p2.body == "right"){
            let p1=s.p1; let p2=s.p2;
            let dx=p2.x-p1.x; let dy=p2.y-p1.y;
            let d=Math.sqrt(dx**2+dy**2)
            EintpRight+=0.5*k*(d-s.L)**2} else
            EchemRight+=0.5*k*(s.L*(fmax-1))**2
            })
            '''
          arguments_string: ()
        }
        {
          name: fixToFloor
          script:
            '''
            // ps.map((p)=> p.y==0 ? p.freeze=true : p.y=p.y)
            ps[0].freeze=true;
            ps[0].vx = 0
            ps[0].vy = 0
            ps[NxLeft*NyLeft+NxRight-1].freeze=true;
            ps[NxLeft*NyLeft+NxRight-1].vx = 0
            ps[NxLeft*NyLeft+NxRight-1].vy = 0

            g=0
            fixed_to_floor=true
            '''
          arguments_string: ()
        }
        {
          name: setupEsArray
          script:
            '''
            EsintL = []
            EsintR = []
            EsKLeft = []
            EsKRight = []
            nextEi=0
            '''
          arguments_string: ()
        }
        {
          name: initializeTwoRectangles
          script:
            '''
            CodeCells[0].loadIscript(ballab.iscriptLibrary.getIscriptByName("startLeftRectangle"))
            CodeCells[1].loadIscript(ballab.iscriptLibrary.getIscriptByName("startRightRectangle"))
            ContEvals[0].exp.value="time // זמן"
            ContEvals[1].exp.value="EintL // אנרגיה פנימית שמאל"
            ContEvals[2].exp.value="EkavgL // אנר. קינ. לחלקיק שמאל"
            ContEvals[3].exp.value="EintR // אנרגיה פנימית ימין"
            ContEvals[4].exp.value="EkavgR // אנר. קינ. לחלקיק ימין"

            startLeftRectangle()
            startRightRectangle()
            '''
          arguments_string: ()
        }
        {
          name: restoreV0s
          script:
            '''
            storedV0s = [...V0s]

            setupLeftRectangle()
            setupRightRectangle()
            fixToFloor()
            ps.forEach((p,i) => {p.vx = storedV0s[i][0];p.vy=storedV0s[i][1]})
            V0s = [...storedV0s]
            setupEsArray()
            calcEs()
            draw()

            '''
          arguments_string: ()
        }
        {
          name: storeV0s
          script: V0s = ps.map((p) => [p.vx,p.vy])
          arguments_string: ()
        }
        {
          name: setupTracking
          script:
            '''
            tracking_points=10000
            tracking=[]
            '''
          arguments_string: ()
        }
        {
          name: Ekavg_summary_fig
          script:
            '''
            clf()
            times = tracking.map((d)=>d.time)
            xlim(0,100)
            ylim(0,max([m*V0Left**2/2, m*V0Right**2/2])*1.1)
            tracking.forEach((d) => Point(d.time, d.EkavgL, 'green',1))
            tracking.forEach((d) => Point(d.time, d.EkavgR, 'blue',1))
            xlabel('זמן [שניות]')
            ylabel('אנר. קינ. לחלקיק [ג׳אולים] (ירוק=שמאל, כחול=ימין)')

            '''
          arguments_string: ()
        }
        {
          name: Eint_summary_fig
          script:
            '''
            clf()
            times = tracking.map((d)=>d.time)
            xlim(0,100)
            ylim(0,ps.length*max([m*V0Left**2/2, m*V0Right**2/2]*1.1))
            tracking.forEach((d) => Point(d.time, d.EintL, 'green',1))
            tracking.forEach((d) => Point(d.time, d.EintR, 'blue',1))
            xlabel('זמן [שניות]')
            ylabel('אנרגיה פנימית [ג׳אולים] (ירוק=שמאל, כחול=ימין)')

            '''
          arguments_string: ()
        }
      ]
    }
    {
      type: Figure
      xlabel: מיקום אופקי [מטרים]
      ylabel: גובה [מטרים]
    }
    {
      type: Cell_code
      iscript_name: startLeftRectangle
    }
    {
      type: Cell_code
      iscript_name: startRightRectangle
    }
    {
      type: Cell_code_repeat
      script:
        '''
        fullstep()


        '''
      dt_script: "0.01"
    }
    {
      type: Instructions
      name: Welcome
      contents: null
    }
  ]
}